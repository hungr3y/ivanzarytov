---
- name: "BE Consul start"
  when:
    - server_type in ["be"]
    - "'server-backend-high.yml' in compose_file"
  ansible.builtin.shell:
  args:
    cmd: ./launcher-consul.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: "GSM Consul start"
  when: server_type in ["gsm"]
  ansible.builtin.shell:
  args:
    cmd: ./launcher-consul.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: "Database start"
  when:
    - server_type in ["be"]
    - db_compose_file is defined
    - db_compose_file | length > 0
  ansible.builtin.shell:
  args:
    cmd: ./dbs-launcher.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: "Kafka start"
  when:
    - server_type in ["be"]
    - "'server-backend-high.yml' in compose_file"
  ansible.builtin.shell:
  args:
    cmd: ./launcher-deploy.sh up -d kafka_init kafka-exporter kafka-minion
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: Pause execution for 30 seconds. Waiting for Kafka to initialize.
  ansible.builtin.pause:
    seconds: 30
  tags:
    - start-all

- name: "Backend high start"
  when:
    - server_type in ["be"]
    - "'server-backend-high.yml' in compose_file"
  ansible.builtin.shell:
  args:
    cmd: ./launcher-deploy.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: "Backend low start"
  when:
    - server_type in ["be"]
    - "'server-backend-high.yml' not in compose_file"
  ansible.builtin.shell:
  args:
    cmd: ./launcher-deploy.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: "RSS start"
  when:
    - server_type in ["be"]
    - "'server-backend-high.yml' in compose_file"
  ansible.builtin.shell:
  args:
    cmd: ./launcher-realms.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-rss

- name: "RSS stop"
  when:
    - server_type in ["be"]
    - "'server-backend-high.yml' in compose_file"
  ansible.builtin.shell:
  args:
    cmd: ./launcher-realms.sh down
    chdir: /home/ec2-user/r3
  tags:
    - stop-rss

- name: Copy healthcheck script
  template:
    src: healthcheck.sh.j2
    dest: /tmp/healthcheck.sh
    mode: '0755'
  delegate_to: 127.0.0.1
  run_once: true
  tags:
    - start-all

- name: Check services health status until all are healthy
  ansible.builtin.command: /tmp/healthcheck.sh
  register: health_check
  until: health_check.rc == 0
  retries: "{{ retries | int }}"
  delay: "{{ interval | int }}"
  delegate_to: 127.0.0.1
  run_once: true
  failed_when: false  # Don't fail the task, let the until loop handle it
  tags:
    - start-all
  
- name: Display health check output (for debugging)
  ansible.builtin.debug:
    var: health_check.stdout_lines
  run_once: true
  tags:
    - start-all

- name: Fail if services are not healthy after all retries
  ansible.builtin.fail:
    msg: "Services are not healthy after {{ retries }} retries."
  when: health_check.rc != 0
  run_once: true
  tags:
    - start-all

- name: "GSM start"
  when:
    - server_type in ["gsm"]
    - health_check.rc == 0
  ansible.builtin.shell:
  args:
    cmd: ./launcher-deploy.sh up -d
    chdir: /home/ec2-user/r3
  tags:
    - start-all

- name: Report cluster health status
  ansible.builtin.debug:
    msg: "Backend is healthy!"
  when: health_check.rc == 0
  run_once: true
  tags:
    - start-all
